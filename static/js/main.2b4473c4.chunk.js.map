{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["text","stats","word_dictionary","App","props","state","input","updateInput","bind","submit","controller","AbortController","signal","abort","e","this","setState","target","value","Object","getOwnPropertyNames","prop","preventDefault","fetch","method","mode","headers","body","JSON","stringify","then","response","json","catch","console","log","hasOwnProperty","dictionary","keys","map","key","index","push","unshift","className","onSubmit","placeholder","onChange","onClick","id","item","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"sJAGIA,E,kFACAC,G,MAAM,IACNC,EAAkB,GAyHPC,E,kDAtHb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAM,CACTC,MAAO,GACPN,KAAM,IAER,EAAKO,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,OAAS,EAAKA,OAAOD,KAAZ,gBAPE,E,gHAehB,IAAME,EAAa,IAAIC,gBACJD,EAAXE,OACRF,EAAWG,U,kCAGDC,GACVC,KAAKC,SAAS,CACZV,MAAOQ,EAAEG,OAAOC,QAEjBjB,EAAO,GACPC,EAAgB,K,6BAGZY,GAAG,IAAD,OACP,GAAoB,qBAATd,EAAqB,CAAC,IAAD,gBACXmB,OAAOC,oBAAoBpB,IADhB,IAC9B,2BAAoD,CAAC,IAA1CqB,EAAyC,eAC3CrB,EAAKqB,IAFgB,+BAKhCP,EAAEQ,iBACFrB,EAAQ,GACRc,KAAKC,SAAS,CACZhB,KAAK,cACLM,MAAO,KAGTiB,MAAM,IAAI,CACRC,OAAQ,OACRC,KAAK,OACLC,QAAQ,CACL,eAAe,mBAChB,OAAU,mBACT,8BAA8B,KAEjCC,KAAMC,KAAKC,UAAU,CACnB,SAASd,KAAKV,MAAMC,UAGvBwB,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAE,GAAI,OACThC,EAAOgC,KAENF,MAAK,kBAAK,EAAKd,SAAS,CACxBhB,KAAM,QAGPiC,OAAM,SAAAnB,GAAC,OAAIoB,QAAQC,IAAI,QAAUrB,Q,+BAKlC,GAAmB,qBAATd,EAAqB,CAC7B,GAAIA,EAAKoC,eAAe,cAAc,CACpC,IAAIC,EAAarC,EAAI,kBACdA,EAAI,WAEWmB,OAAOmB,KAAKD,GAAYE,KAAI,SAASC,EAAIC,GAC7DvC,EAAgBwC,KAAK,CAACF,EAAM,KAAM,IAAMH,EAAWG,QAErDtC,EAAgByC,QAAQ,CAAC,kBAAmB,eAC5CT,QAAQC,IAAIjC,EAAiB,cAEjBiB,OAAOmB,KAAKtC,GAAMuC,KAAI,SAASC,EAAKC,GAChDxC,EAAMyC,KAAK,CAACF,EAAKxC,EAAKwC,QAK5B,OACE,yBAAKI,UAAU,OACb,4CACA,6BACE,iEAGE,0BAAMC,SAAU9B,KAAKN,QACnB,8BAAUqC,YAAY,gCAAgCC,SAAUhC,KAAKR,YAAaW,MAAOH,KAAKV,MAAMC,QACpG,4BAAQ0C,QAASjC,KAAKN,QAAtB,YAIJ,yBAAKS,MAAOH,KAAKV,MAAML,MAAOe,KAAKV,MAAML,MAEzC,yBAAK4C,UAAU,QAAQK,GAAG,UAEtBhD,EAAMsC,KAAI,SAACW,GAAD,OACV,4BAAKA,OAIT,yBAAMN,UAAU,QAAQK,GAAG,cAEzB/C,EAAgBqC,KAAI,SAACW,GAAD,OACpB,4BAAKA,Y,GA7GGC,IAAMC,WCKJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnC,MAAK,SAAAoC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAmC,GACLlC,QAAQkC,MAAMA,EAAMC,a","file":"static/js/main.2b4473c4.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport './App.css';\n\nvar text;\nvar stats=[];\nvar word_dictionary = []; \n\nclass App extends React.Component{\n  constructor(props){\n    super(props)\n    this.state={\n      input: '',\n      text: '',\n    }\n    this.updateInput = this.updateInput.bind(this)\n    this.submit = this.submit.bind(this)\n  }\n\n  componentDidMount(){\n\n  }\n\n  componentWillUnmount(){\n    const controller = new AbortController();\n    const { signal } = controller;\n    controller.abort();\n  }\n\n  updateInput(e){\n    this.setState({\n      input: e.target.value\n    })\n     stats =[];\n     word_dictionary=[];\n  }\n\n  submit(e){\n    if (typeof text !== 'undefined'){\n      for (const prop of Object.getOwnPropertyNames(text)){\n        delete text[prop]\n      }\n    }\n    e.preventDefault();\n    stats = [];\n    this.setState({\n      text:'loading ...',\n      input: ''\n    })\n  \n    fetch('/',{\n      method: \"POST\",\n      mode:\"cors\",\n      headers:{\n         \"Content-Type\":\"application/json\",\n        \"Accept\": \"application/json\",\n         \"Access-Control-Allow-Origin\":\"*\"\n      },\n      body: JSON.stringify({\n        'Text: ':this.state.input\n      })\n    })\n    .then(response => response.json())\n    .then(json => \n     text = json\n     \n    ).then(()=> this.setState({\n      text: ''\n    })\n    )\n    .catch(e => console.log('error' + e))\n    \n  }\n\n  render(){\n    if(typeof text !== 'undefined'){\n      if (text.hasOwnProperty('Dictionary')){\n        var dictionary = text['Dictionary'];\n        delete text['Dictionary'];\n\n        var make_dictionary = Object.keys(dictionary).map(function(key,index){\n          word_dictionary.push([key + ': ', ' ' + dictionary[key]])\n        });\n        word_dictionary.unshift(['List of Words: ', ' frequency'])\n        console.log(word_dictionary+ 'dictionary')\n      }\n      var keyList = Object.keys(text).map(function(key, index){\n        stats.push([key, text[key]]);\n      })\n\n    }\n\n  return (\n    <div className=\"App\">\n      <h1>Word Counter</h1>\n      <div>\n        <label>\n          Fancy some stats on your text?\n          </label>\n          <form onSubmit={this.submit}>\n            <textarea placeholder=' Get the counter started ... ' onChange={this.updateInput} value={this.state.input}></textarea>\n            <button onClick={this.submit}>Submit</button>\n          </form>\n\n      </div>\n        <div value={this.state.text}>{this.state.text}\n        </div>\n        <div className='stats' id='result'>\n          {\n            stats.map((item)=>(\n            <li>{item}</li>\n          ))\n          }\n        </div>\n        <div  className='stats' id='dictionary'>\n        {\n          word_dictionary.map((item)=>(\n          <li>{item}</li>\n          ))\n        } \n        </div>\n    </div>\n  );\n}\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'semantic-ui-css/semantic.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}
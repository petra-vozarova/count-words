{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["text","stats","word_dictionary","App","props","state","input","updateInput","bind","submit","showDictionary","controller","AbortController","signal","abort","e","this","setState","target","value","document","getElementById","setAttribute","Object","getOwnPropertyNames","prop","preventDefault","fetch","method","mode","headers","body","JSON","stringify","then","response","json","catch","console","log","length","hasOwnProperty","dictionary","keys","map","key","index","push","unshift","className","onSubmit","placeholder","onChange","onClick","id","item","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.07f04cf8.chunk.js","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './App.css';\r\n\r\nvar text;\r\nvar stats=[];\r\nvar word_dictionary = []; \r\n\r\nclass App extends React.Component{\r\n  constructor(props){\r\n    super(props)\r\n    this.state={\r\n      input: '',\r\n      text: '',\r\n    }\r\n    this.updateInput = this.updateInput.bind(this)\r\n    this.submit = this.submit.bind(this)\r\n    this.showDictionary = this.showDictionary.bind(this)\r\n  }\r\n\r\n  componentWillUnmount(){\r\n    const controller = new AbortController();\r\n    const { signal } = controller;\r\n    controller.abort();\r\n  }\r\n\r\n  updateInput(e){\r\n    this.setState({\r\n      input: e.target.value,\r\n    })\r\n    document.getElementById('dictionary').setAttribute(\"style\", \"opacity:0\");\r\n    document.getElementById('returnedStats').setAttribute(\"style\", \"opacity:0\");\r\n     stats =[];\r\n     word_dictionary=[];\r\n\r\n  }\r\n\r\n  submit(e){\r\n    if (typeof text !== 'undefined'){\r\n      for (const prop of Object.getOwnPropertyNames(text)){\r\n        delete text[prop]\r\n      }\r\n    }\r\n    \r\n    e.preventDefault();\r\n    stats = [];\r\n    this.setState({\r\n      text:'loading ...',\r\n      input: ''\r\n    });\r\n  \r\n    fetch('https://vozarova-word-counter.herokuapp.com/',{\r\n      method: \"POST\",\r\n      mode:\"cors\",\r\n      headers:{\r\n         \"Content-Type\":\"application/json\",\r\n        \"Accept\": \"application/json\",\r\n         \"Access-Control-Allow-Origin\":\"*\"\r\n      },\r\n      body: JSON.stringify({\r\n        'Text: ':this.state.input\r\n      })\r\n    })\r\n    .then(response => response.json())\r\n    .then(json => \r\n      text = json\r\n    ).then(()=> this.setState({\r\n      text: ''\r\n      })\r\n    ).catch(e => console.log('error' + e))  \r\n  }\r\n\r\n  showDictionary(){\r\n    if (word_dictionary.length >= 1) {\r\n      document.getElementById('dictionary').setAttribute(\"style\",\"opacity:1\")\r\n    }\r\n  }\r\n\r\n  render(){\r\n    if(typeof text !== 'undefined'){\r\n      if (text.hasOwnProperty('Dictionary')){\r\n        var dictionary = text['Dictionary'];\r\n        delete text['Dictionary'];\r\n        var make_dictionary = Object.keys(dictionary).map(function(key,index){\r\n          word_dictionary.push([key + ': ', ' ' + dictionary[key]])\r\n        });\r\n        word_dictionary.unshift(['List of Words: ', ' frequency']);\r\n        //console.log(word_dictionary+ 'dictionary');\r\n        document.getElementById('returnedStats').setAttribute(\"style\",\"opacity:1\");\r\n      }\r\n      var keyList = Object.keys(text).map(function(key, index){\r\n        stats.push([key, text[key]]);\r\n      });\r\n    }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Word Counter</h1>\r\n      <div>\r\n        <label>\r\n          Fancy some stats on your text?\r\n          </label>\r\n          <form onSubmit={this.submit}>\r\n            <textarea placeholder=' Get the counter started ... ' onChange={this.updateInput} value={this.state.input}></textarea>\r\n            <button onClick={this.submit}>Submit</button>\r\n          </form>\r\n\r\n      </div>\r\n      <div className='flaskResponse' id='returnedStats'>\r\n        <div value={this.state.text}>{this.state.text}\r\n        </div>\r\n        <div className='stats' id='result'>\r\n          {\r\n            stats.map((item)=>(\r\n            <li>{item}</li>\r\n          ))\r\n          }\r\n        </div>\r\n        <button onClick={this.showDictionary}>List of Words</button>\r\n        <div  className='stats' id='dictionary'>\r\n        {\r\n          word_dictionary.map((item)=>(\r\n          <li>{item}</li>\r\n          ))\r\n        } \r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n}\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport 'semantic-ui-css/semantic.min.css'\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}